// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type CompanyType string

const (
	CompanyTypeCorporations       CompanyType = "Corporations"
	CompanyTypeNonProfit          CompanyType = "NonProfit"
	CompanyTypeCooperative        CompanyType = "Cooperative"
	CompanyTypeSoleProprietorship CompanyType = "SoleProprietorship"
)

func (e *CompanyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CompanyType(s)
	case string:
		*e = CompanyType(s)
	default:
		return fmt.Errorf("unsupported scan type for CompanyType: %T", src)
	}
	return nil
}

type NullCompanyType struct {
	CompanyType CompanyType
	Valid       bool // Valid is true if CompanyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCompanyType) Scan(value interface{}) error {
	if value == nil {
		ns.CompanyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CompanyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCompanyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CompanyType), nil
}

type Company struct {
	ID          uuid.UUID
	Name        string
	Description pgtype.Text
	Employees   int32
	Registered  bool
	Type        CompanyType
}

type User struct {
	Name string
}
