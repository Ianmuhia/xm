// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO company (name, description, employees, registered, type)
VALUES ($1, $2, $3, $4, $5) RETURNING id, name, description, employees, registered, type
`

type CreateCompanyParams struct {
	Name        string
	Description pgtype.Text
	Employees   int32
	Registered  bool
	Type        CompanyType
}

// Insert a new company into the company table
func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany,
		arg.Name,
		arg.Description,
		arg.Employees,
		arg.Registered,
		arg.Type,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Employees,
		&i.Registered,
		&i.Type,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM company
WHERE id = $1
`

// Delete a company from the company table
func (q *Queries) DeleteCompany(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCompany, id)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT id, name, description, employees, registered, type
FROM company
WHERE id = $1
`

// Retrieve information about a specific company by its ID
func (q *Queries) GetCompany(ctx context.Context, id uuid.UUID) (Company, error) {
	row := q.db.QueryRow(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Employees,
		&i.Registered,
		&i.Type,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT name
FROM users
WHERE name = $1
`

// Retrieve information about a specific user by their name
func (q *Queries) GetUserByName(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	err := row.Scan(&name)
	return name, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (name)
VALUES ($1) RETURNING name
`

// Insert a new user into the users table
func (q *Queries) InsertUser(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, insertUser, name)
	err := row.Scan(&name)
	return name, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, description, employees, registered, type FROM company
`

func (q *Queries) ListCompanies(ctx context.Context) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompanies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Employees,
			&i.Registered,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE  company
SET name = $1, description = $2 , employees = $3, type = $4
WHERE id = $5 RETURNING id, name, description, employees, registered, type
`

type UpdateCompanyParams struct {
	Name        string
	Description pgtype.Text
	Employees   int32
	Type        CompanyType
	ID          uuid.UUID
}

// Update an existing company's information
func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, updateCompany,
		arg.Name,
		arg.Description,
		arg.Employees,
		arg.Type,
		arg.ID,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Employees,
		&i.Registered,
		&i.Type,
	)
	return i, err
}
